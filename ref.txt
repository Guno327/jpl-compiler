#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  rgba *data;
} _a3_rgba;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a1_int64_t *data;
} _a3__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  int64_t *data;
} _a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t *data;
} _a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  double *data;
} _a3_double;

void jpl_main(struct args args) {
    _a3_rgba _0;
    _a3__a1_int64_t _1;
    int64_t _2 = 909;
    _1.d0 = _2;
    if (_2 > 0) 
    goto _jump1;
    fail_assertion("non-positive loop bound");
    _jump1:;
    int64_t _3 = 485;
    _1.d1 = _3;
    if (_3 > 0) 
    goto _jump2;
    fail_assertion("non-positive loop bound");
    _jump2:;
    int64_t _4;
    int64_t _5 = 244;
    if (_5 > 0) 
    goto _jump3;
    fail_assertion("non-positive loop bound");
    _jump3:;
    int64_t _6 = 616;
    if (_6 > 0) 
    goto _jump4;
    fail_assertion("non-positive loop bound");
    _jump4:;
    int64_t _7 = 357;
    if (_7 > 0) 
    goto _jump5;
    fail_assertion("non-positive loop bound");
    _jump5:;
    _4 = 0;
    int64_t _8 = 0; // c
    int64_t _9 = 0; // b
    int64_t _10 = 0; // a
    _jump6:; // Begin body of loop
    _4 += _10;
    _8++;
    if (_8 < _7)
    goto _jump6;
    _8 = 0;
    _9++;
    if (_9 < _6)
    goto _jump6;
    _9 = 0;
    _10++;
    if (_10 < _5)
    goto _jump6;
    _1.d2 = _4;
    if (_4 > 0) 
    goto _jump7;
    fail_assertion("non-positive loop bound");
    _jump7:;
    int64_t _11 = 1;
    _11 *= _2;
    _11 *= _3;
    _11 *= _4;
    _11 *= sizeof(_a1_int64_t);
    _1.data = jpl_alloc(_11);
    int64_t _12 = 0; // c
    int64_t _13 = 0; // b
    int64_t _14 = 0; // a
    _jump8:; // Begin body of loop
    int64_t _15 = 912;
    _a1_int64_t _16;
    _16.d0 = 2;
    _16.data = jpl_alloc(sizeof(int64_t) * 2);
    _16.data[0] = _12;
    _16.data[1] = _15;
    int64_t _17 = 0;
    _17 *= _1.d0;
    _17 += _14;
    _17 *= _1.d1;
    _17 += _13;
    _17 *= _1.d2;
    _17 += _12;
    _1.data[_17] = _16;
    _12++;
    if (_12 < _4)
    goto _jump8;
    _12 = 0;
    _13++;
    if (_13 < _3)
    goto _jump8;
    _13 = 0;
    _14++;
    if (_14 < _2)
    goto _jump8;
    int64_t _18 = 667;
    int64_t _19 = -_18;
    int64_t _20 = 150;
    int64_t _21 = -_20;
    int64_t _22 = 278;
    int64_t _23 = -_22;
    int64_t _24 = -_23;
    if (_19 >= 0)
    goto _jump9;
    fail_assertion("negative array index");
    _jump9:;
    if (_19 < _1.d0)
    goto _jump10;
    fail_assertion("index too large");
    _jump10:;
    if (_21 >= 0)
    goto _jump11;
    fail_assertion("negative array index");
    _jump11:;
    if (_21 < _1.d1)
    goto _jump12;
    fail_assertion("index too large");
    _jump12:;
    if (_24 >= 0)
    goto _jump13;
    fail_assertion("negative array index");
    _jump13:;
    if (_24 < _1.d2)
    goto _jump14;
    fail_assertion("index too large");
    _jump14:;
    int64_t _25 = 0;
    _25 *= _1.d0;
    _25 += _19;
    _25 *= _1.d1;
    _25 += _21;
    _25 *= _1.d2;
    _25 += _24;
    _a1_int64_t _26 = _1.data[_25];
    int64_t _27;
    int64_t _28;
    int64_t _29 = 263;
    int64_t _30 = -_29;
    if (_30 > 0) 
    goto _jump15;
    fail_assertion("non-positive loop bound");
    _jump15:;
    int64_t _31 = 939;
    if (_31 > 0) 
    goto _jump16;
    fail_assertion("non-positive loop bound");
    _jump16:;
    int64_t _32 = 215;
    int64_t _33 = -_32;
    if (_33 > 0) 
    goto _jump17;
    fail_assertion("non-positive loop bound");
    _jump17:;
    _28 = 0;
    int64_t _34 = 0; // c
    int64_t _35 = 0; // b
    int64_t _36 = 0; // a
    _jump18:; // Begin body of loop
    int64_t _37;
    if (_36 > 0) 
    goto _jump19;
    fail_assertion("non-positive loop bound");
    _jump19:;
    if (_35 > 0) 
    goto _jump20;
    fail_assertion("non-positive loop bound");
    _jump20:;
    if (_36 > 0) 
    goto _jump21;
    fail_assertion("non-positive loop bound");
    _jump21:;
    _37 = 0;
    int64_t _38 = 0; // f
    int64_t _39 = 0; // e
    int64_t _40 = 0; // d
    _jump22:; // Begin body of loop
    int64_t _41 = 992;
    _37 += _41;
    _38++;
    if (_38 < _36)
    goto _jump22;
    _38 = 0;
    _39++;
    if (_39 < _35)
    goto _jump22;
    _39 = 0;
    _40++;
    if (_40 < _36)
    goto _jump22;
    _28 += _37;
    _34++;
    if (_34 < _33)
    goto _jump18;
    _34 = 0;
    _35++;
    if (_35 < _31)
    goto _jump18;
    _35 = 0;
    _36++;
    if (_36 < _30)
    goto _jump18;
    if (_28 > 0) 
    goto _jump23;
    fail_assertion("non-positive loop bound");
    _jump23:;
    int64_t _42;
    int64_t _43 = 769;
    if (_43 > 0) 
    goto _jump24;
    fail_assertion("non-positive loop bound");
    _jump24:;
    int64_t _44 = 867;
    if (_44 > 0) 
    goto _jump25;
    fail_assertion("non-positive loop bound");
    _jump25:;
    int64_t _45 = 205;
    int64_t _46 = -_45;
    if (_46 > 0) 
    goto _jump26;
    fail_assertion("non-positive loop bound");
    _jump26:;
    _42 = 0;
    int64_t _47 = 0; // c
    int64_t _48 = 0; // b
    int64_t _49 = 0; // a
    _jump27:; // Begin body of loop
    int64_t _50 = -_49;
    _42 += _50;
    _47++;
    if (_47 < _46)
    goto _jump27;
    _47 = 0;
    _48++;
    if (_48 < _44)
    goto _jump27;
    _48 = 0;
    _49++;
    if (_49 < _43)
    goto _jump27;
    if (_42 > 0) 
    goto _jump28;
    fail_assertion("non-positive loop bound");
    _jump28:;
    _27 = 0;
    int64_t _51 = 0; // b
    int64_t _52 = 0; // a
    _jump29:; // Begin body of loop
    int64_t _53;
    int64_t _54 = 541;
    if (_54 > 0) 
    goto _jump30;
    fail_assertion("non-positive loop bound");
    _jump30:;
    if (_51 > 0) 
    goto _jump31;
    fail_assertion("non-positive loop bound");
    _jump31:;
    _53 = 0;
    int64_t _55 = 0; // d
    int64_t _56 = 0; // c
    _jump32:; // Begin body of loop
    _53 += _52;
    _55++;
    if (_55 < _51)
    goto _jump32;
    _55 = 0;
    _56++;
    if (_56 < _54)
    goto _jump32;
    _27 += _53;
    _51++;
    if (_51 < _42)
    goto _jump29;
    _51 = 0;
    _52++;
    if (_52 < _28)
    goto _jump29;
    if (_27 >= 0)
    goto _jump33;
    fail_assertion("negative array index");
    _jump33:;
    if (_27 < _26.d0)
    goto _jump34;
    fail_assertion("index too large");
    _jump34:;
    int64_t _57 = 0;
    _57 *= _26.d0;
    _57 += _27;
    int64_t _58 = _26.data[_57];
    _0.d0 = _58;
    if (_58 > 0) 
    goto _jump35;
    fail_assertion("non-positive loop bound");
    _jump35:;
    int64_t _59 = 50;
    int64_t _60 = 138;
    int64_t _61 = -_60;
    bool _62 = _59 > _61;
    bool _63;
    if (!_62)
    goto _jump36;
    bool _64 = true;
    _63 = _64;
    goto _jump37;
    _jump36:;
    bool _65 = true;
    _63 = _65;
    _jump37:;
    int64_t _66;
    if (!_63)
    goto _jump38;
    int64_t _67;
    int64_t _68;
    int64_t _69 = 451;
    int64_t _70 = 471;
    int64_t _71 = _69 + _70;
    if (_71 > 0) 
    goto _jump39;
    fail_assertion("non-positive loop bound");
    _jump39:;
    int64_t _72;
    int64_t _73 = 292;
    if (_73 > 0) 
    goto _jump40;
    fail_assertion("non-positive loop bound");
    _jump40:;
    _72 = 0;
    int64_t _74 = 0; // a
    _jump41:; // Begin body of loop
    _72 += _74;
    _74++;
    if (_74 < _73)
    goto _jump41;
    if (_72 > 0) 
    goto _jump42;
    fail_assertion("non-positive loop bound");
    _jump42:;
    _68 = 0;
    int64_t _75 = 0; // b
    int64_t _76 = 0; // a
    _jump43:; // Begin body of loop
    int64_t _77 = 607;
    _68 += _77;
    _75++;
    if (_75 < _72)
    goto _jump43;
    _75 = 0;
    _76++;
    if (_76 < _71)
    goto _jump43;
    if (_68 > 0) 
    goto _jump44;
    fail_assertion("non-positive loop bound");
    _jump44:;
    _67 = 0;
    int64_t _78 = 0; // a
    _jump45:; // Begin body of loop
    int64_t _79 = -_78;
    _67 += _79;
    _78++;
    if (_78 < _68)
    goto _jump45;
    _66 = _67;
    goto _jump46;
    _jump38:;
    int64_t _80 = 212;
    int64_t _81 = -_80;
    int64_t _82 = -_81;
    _66 = _82;
    _jump46:;
    _0.d1 = _66;
    if (_66 > 0) 
    goto _jump47;
    fail_assertion("non-positive loop bound");
    _jump47:;
    _a3_int64_t _83;
    int64_t _84 = 249;
    _83.d0 = _84;
    if (_84 > 0) 
    goto _jump48;
    fail_assertion("non-positive loop bound");
    _jump48:;
    int64_t _85;
    int64_t _86 = 715;
    if (_86 > 0) 
    goto _jump49;
    fail_assertion("non-positive loop bound");
    _jump49:;
    int64_t _87 = 492;
    int64_t _88 = -_87;
    if (_88 > 0) 
    goto _jump50;
    fail_assertion("non-positive loop bound");
    _jump50:;
    int64_t _89 = 182;
    int64_t _90 = -_89;
    if (_90 > 0) 
    goto _jump51;
    fail_assertion("non-positive loop bound");
    _jump51:;
    _85 = 0;
    int64_t _91 = 0; // c
    int64_t _92 = 0; // b
    int64_t _93 = 0; // a
    _jump52:; // Begin body of loop
    int64_t _94 = 865;
    _85 += _94;
    _91++;
    if (_91 < _90)
    goto _jump52;
    _91 = 0;
    _92++;
    if (_92 < _88)
    goto _jump52;
    _92 = 0;
    _93++;
    if (_93 < _86)
    goto _jump52;
    _83.d1 = _85;
    if (_85 > 0) 
    goto _jump53;
    fail_assertion("non-positive loop bound");
    _jump53:;
    int64_t _95;
    int64_t _96 = 566;
    if (_96 > 0) 
    goto _jump54;
    fail_assertion("non-positive loop bound");
    _jump54:;
    int64_t _97 = 274;
    if (_97 > 0) 
    goto _jump55;
    fail_assertion("non-positive loop bound");
    _jump55:;
    _95 = 0;
    int64_t _98 = 0; // b
    int64_t _99 = 0; // a
    _jump56:; // Begin body of loop
    int64_t _100;
    if (_99 > 0) 
    goto _jump57;
    fail_assertion("non-positive loop bound");
    _jump57:;
    int64_t _101 = 381;
    if (_101 > 0) 
    goto _jump58;
    fail_assertion("non-positive loop bound");
    _jump58:;
    _100 = 0;
    int64_t _102 = 0; // d
    int64_t _103 = 0; // c
    _jump59:; // Begin body of loop
    _100 += _103;
    _102++;
    if (_102 < _101)
    goto _jump59;
    _102 = 0;
    _103++;
    if (_103 < _99)
    goto _jump59;
    _95 += _100;
    _98++;
    if (_98 < _97)
    goto _jump56;
    _98 = 0;
    _99++;
    if (_99 < _96)
    goto _jump56;
    _83.d2 = _95;
    if (_95 > 0) 
    goto _jump60;
    fail_assertion("non-positive loop bound");
    _jump60:;
    int64_t _104 = 1;
    _104 *= _84;
    _104 *= _85;
    _104 *= _95;
    _104 *= sizeof(int64_t);
    _83.data = jpl_alloc(_104);
    int64_t _105 = 0; // c
    int64_t _106 = 0; // b
    int64_t _107 = 0; // a
    _jump61:; // Begin body of loop
    int64_t _108 = 0;
    _108 *= _83.d0;
    _108 += _107;
    _108 *= _83.d1;
    _108 += _106;
    _108 *= _83.d2;
    _108 += _105;
    _83.data[_108] = _106;
    _105++;
    if (_105 < _95)
    goto _jump61;
    _105 = 0;
    _106++;
    if (_106 < _85)
    goto _jump61;
    _106 = 0;
    _107++;
    if (_107 < _84)
    goto _jump61;
    _a2_int64_t _109;
    int64_t _110 = 810;
    _109.d0 = _110;
    if (_110 > 0) 
    goto _jump62;
    fail_assertion("non-positive loop bound");
    _jump62:;
    int64_t _111 = 1000;
    _109.d1 = _111;
    if (_111 > 0) 
    goto _jump63;
    fail_assertion("non-positive loop bound");
    _jump63:;
    int64_t _112 = 1;
    _112 *= _110;
    _112 *= _111;
    _112 *= sizeof(int64_t);
    _109.data = jpl_alloc(_112);
    int64_t _113 = 0; // b
    int64_t _114 = 0; // a
    _jump64:; // Begin body of loop
    int64_t _115 = 470;
    int64_t _116 = 0;
    _116 *= _109.d0;
    _116 += _114;
    _116 *= _109.d1;
    _116 += _113;
    _109.data[_116] = _115;
    _113++;
    if (_113 < _111)
    goto _jump64;
    _113 = 0;
    _114++;
    if (_114 < _110)
    goto _jump64;
    int64_t _117 = 755;
    int64_t _118;
    int64_t _119 = 888;
    if (_119 > 0) 
    goto _jump65;
    fail_assertion("non-positive loop bound");
    _jump65:;
    _118 = 0;
    int64_t _120 = 0; // a
    _jump66:; // Begin body of loop
    _118 += _120;
    _120++;
    if (_120 < _119)
    goto _jump66;
    int64_t _121;
    int64_t _122 = 237;
    if (_122 > 0) 
    goto _jump67;
    fail_assertion("non-positive loop bound");
    _jump67:;
    _121 = 0;
    int64_t _123 = 0; // a
    _jump68:; // Begin body of loop
    int64_t _124 = 891;
    _121 += _124;
    _123++;
    if (_123 < _122)
    goto _jump68;
    int64_t _125 = _118 - _121;
    if (_117 >= 0)
    goto _jump69;
    fail_assertion("negative array index");
    _jump69:;
    if (_117 < _109.d0)
    goto _jump70;
    fail_assertion("index too large");
    _jump70:;
    if (_125 >= 0)
    goto _jump71;
    fail_assertion("negative array index");
    _jump71:;
    if (_125 < _109.d1)
    goto _jump72;
    fail_assertion("index too large");
    _jump72:;
    int64_t _126 = 0;
    _126 *= _109.d0;
    _126 += _117;
    _126 *= _109.d1;
    _126 += _125;
    int64_t _127 = _109.data[_126];
    int64_t _128 = 891;
    int64_t _129 = -_128;
    int64_t _130;
    int64_t _131 = 914;
    if (_131 > 0) 
    goto _jump73;
    fail_assertion("non-positive loop bound");
    _jump73:;
    int64_t _132 = 819;
    if (_132 > 0) 
    goto _jump74;
    fail_assertion("non-positive loop bound");
    _jump74:;
    int64_t _133 = 354;
    if (_133 > 0) 
    goto _jump75;
    fail_assertion("non-positive loop bound");
    _jump75:;
    _130 = 0;
    int64_t _134 = 0; // c
    int64_t _135 = 0; // b
    int64_t _136 = 0; // a
    _jump76:; // Begin body of loop
    _130 += _134;
    _134++;
    if (_134 < _133)
    goto _jump76;
    _134 = 0;
    _135++;
    if (_135 < _132)
    goto _jump76;
    _135 = 0;
    _136++;
    if (_136 < _131)
    goto _jump76;
    if (_127 >= 0)
    goto _jump77;
    fail_assertion("negative array index");
    _jump77:;
    if (_127 < _83.d0)
    goto _jump78;
    fail_assertion("index too large");
    _jump78:;
    if (_129 >= 0)
    goto _jump79;
    fail_assertion("negative array index");
    _jump79:;
    if (_129 < _83.d1)
    goto _jump80;
    fail_assertion("index too large");
    _jump80:;
    if (_130 >= 0)
    goto _jump81;
    fail_assertion("negative array index");
    _jump81:;
    if (_130 < _83.d2)
    goto _jump82;
    fail_assertion("index too large");
    _jump82:;
    int64_t _137 = 0;
    _137 *= _83.d0;
    _137 += _127;
    _137 *= _83.d1;
    _137 += _129;
    _137 *= _83.d2;
    _137 += _130;
    int64_t _138 = _83.data[_137];
    _0.d2 = _138;
    if (_138 > 0) 
    goto _jump83;
    fail_assertion("non-positive loop bound");
    _jump83:;
    int64_t _139 = 1;
    _139 *= _58;
    _139 *= _66;
    _139 *= _138;
    _139 *= sizeof(rgba);
    _0.data = jpl_alloc(_139);
    int64_t _140 = 0; // c
    int64_t _141 = 0; // b
    int64_t _142 = 0; // a
    _jump84:; // Begin body of loop
    double _143 = 96.0;
    double _144 = 67.0;
    bool _145 = _143 < _144;
    rgba _146;
    if (!_145)
    goto _jump85;
    double _147 = 42.0;
    double _148 = 47.0;
    double _149 = -_148;
    double _150 = 27.0;
    double _151;
    if (_140 > 0) 
    goto _jump86;
    fail_assertion("non-positive loop bound");
    _jump86:;
    int64_t _152 = 990;
    if (_152 > 0) 
    goto _jump87;
    fail_assertion("non-positive loop bound");
    _jump87:;
    if (_141 > 0) 
    goto _jump88;
    fail_assertion("non-positive loop bound");
    _jump88:;
    _151 = 0;
    int64_t _153 = 0; // f
    int64_t _154 = 0; // e
    int64_t _155 = 0; // d
    _jump89:; // Begin body of loop
    double _156 = 80.0;
    _151 += _156;
    _153++;
    if (_153 < _141)
    goto _jump89;
    _153 = 0;
    _154++;
    if (_154 < _152)
    goto _jump89;
    _154 = 0;
    _155++;
    if (_155 < _140)
    goto _jump89;
    double _157 = _150 / _151;
    double _158 = 46.0;
    rgba _159 = { _147, _149, _157, _158 };
    _146 = _159;
    goto _jump90;
    _jump85:;
    double _160;
    if (_140 > 0) 
    goto _jump91;
    fail_assertion("non-positive loop bound");
    _jump91:;
    int64_t _161 = 835;
    if (_161 > 0) 
    goto _jump92;
    fail_assertion("non-positive loop bound");
    _jump92:;
    _160 = 0;
    int64_t _162 = 0; // e
    int64_t _163 = 0; // d
    _jump93:; // Begin body of loop
    bool _164 = true;
    double _165;
    if (!_164)
    goto _jump94;
    double _166 = 32.0;
    _165 = _166;
    goto _jump95;
    _jump94:;
    double _167 = 29.0;
    _165 = _167;
    _jump95:;
    _160 += _165;
    _162++;
    if (_162 < _161)
    goto _jump93;
    _162 = 0;
    _163++;
    if (_163 < _140)
    goto _jump93;
    double _168 = 97.0;
    _a3_double _169;
    _169.d0 = _142;
    if (_142 > 0) 
    goto _jump96;
    fail_assertion("non-positive loop bound");
    _jump96:;
    int64_t _170 = 51;
    _169.d1 = _170;
    if (_170 > 0) 
    goto _jump97;
    fail_assertion("non-positive loop bound");
    _jump97:;
    _169.d2 = _141;
    if (_141 > 0) 
    goto _jump98;
    fail_assertion("non-positive loop bound");
    _jump98:;
    int64_t _171 = 1;
    _171 *= _142;
    _171 *= _170;
    _171 *= _141;
    _171 *= sizeof(double);
    _169.data = jpl_alloc(_171);
    int64_t _172 = 0; // f
    int64_t _173 = 0; // e
    int64_t _174 = 0; // d
    _jump99:; // Begin body of loop
    double _175 = 51.0;
    int64_t _176 = 0;
    _176 *= _169.d0;
    _176 += _174;
    _176 *= _169.d1;
    _176 += _173;
    _176 *= _169.d2;
    _176 += _172;
    _169.data[_176] = _175;
    _172++;
    if (_172 < _141)
    goto _jump99;
    _172 = 0;
    _173++;
    if (_173 < _170)
    goto _jump99;
    _173 = 0;
    _174++;
    if (_174 < _142)
    goto _jump99;
    bool _177 = true;
    int64_t _178;
    if (!_177)
    goto _jump100;
    _178 = _140;
    goto _jump101;
    _jump100:;
    _178 = _141;
    _jump101:;
    int64_t _179 = 195;
    if (_142 >= 0)
    goto _jump102;
    fail_assertion("negative array index");
    _jump102:;
    if (_142 < _169.d0)
    goto _jump103;
    fail_assertion("index too large");
    _jump103:;
    if (_178 >= 0)
    goto _jump104;
    fail_assertion("negative array index");
    _jump104:;
    if (_178 < _169.d1)
    goto _jump105;
    fail_assertion("index too large");
    _jump105:;
    if (_179 >= 0)
    goto _jump106;
    fail_assertion("negative array index");
    _jump106:;
    if (_179 < _169.d2)
    goto _jump107;
    fail_assertion("index too large");
    _jump107:;
    int64_t _180 = 0;
    _180 *= _169.d0;
    _180 += _142;
    _180 *= _169.d1;
    _180 += _178;
    _180 *= _169.d2;
    _180 += _179;
    double _181 = _169.data[_180];
    double _182;
    int64_t _183 = -_140;
    if (_183 > 0) 
    goto _jump108;
    fail_assertion("non-positive loop bound");
    _jump108:;
    _182 = 0;
    int64_t _184 = 0; // d
    _jump109:; // Begin body of loop
    double _185 = 86.0;
    _182 += _185;
    _184++;
    if (_184 < _183)
    goto _jump109;
    rgba _186 = { _160, _168, _181, _182 };
    _146 = _186;
    _jump90:;
    int64_t _187 = 0;
    _187 *= _0.d0;
    _187 += _142;
    _187 *= _0.d1;
    _187 += _141;
    _187 *= _0.d2;
    _187 += _140;
    _0.data[_187] = _146;
    _140++;
    if (_140 < _138)
    goto _jump84;
    _140 = 0;
    _141++;
    if (_141 < _66)
    goto _jump84;
    _141 = 0;
    _142++;
    if (_142 < _58)
    goto _jump84;
    int64_t _188;
    int64_t _189;
    bool _190 = false;
    int64_t _191;
    if (!_190)
    goto _jump110;
    int64_t _192 = 619;
    int64_t _193 = -_192;
    int64_t _194 = 859;
    int64_t _195 = -_194;
    int64_t _196 = _193 * _195;
    _191 = _196;
    goto _jump111;
    _jump110:;
    _a1_int64_t _197;
    int64_t _198 = 985;
    _197.d0 = _198;
    if (_198 > 0) 
    goto _jump112;
    fail_assertion("non-positive loop bound");
    _jump112:;
    int64_t _199 = 1;
    _199 *= _198;
    _199 *= sizeof(int64_t);
    _197.data = jpl_alloc(_199);
    int64_t _200 = 0; // a
    _jump113:; // Begin body of loop
    int64_t _201 = 832;
    int64_t _202 = 0;
    _202 *= _197.d0;
    _202 += _200;
    _197.data[_202] = _201;
    _200++;
    if (_200 < _198)
    goto _jump113;
    int64_t _203 = 913;
    if (_203 >= 0)
    goto _jump114;
    fail_assertion("negative array index");
    _jump114:;
    if (_203 < _197.d0)
    goto _jump115;
    fail_assertion("index too large");
    _jump115:;
    int64_t _204 = 0;
    _204 *= _197.d0;
    _204 += _203;
    int64_t _205 = _197.data[_204];
    _191 = _205;
    _jump111:;
    if (_191 > 0) 
    goto _jump116;
    fail_assertion("non-positive loop bound");
    _jump116:;
    _189 = 0;
    int64_t _206 = 0; // a
    _jump117:; // Begin body of loop
    int64_t _207 = 816;
    _189 += _207;
    _206++;
    if (_206 < _191)
    goto _jump117;
    if (_189 > 0) 
    goto _jump118;
    fail_assertion("non-positive loop bound");
    _jump118:;
    _188 = 0;
    int64_t _208 = 0; // a
    _jump119:; // Begin body of loop
    _a3_int64_t _209;
    _209.d0 = _208;
    if (_208 > 0) 
    goto _jump120;
    fail_assertion("non-positive loop bound");
    _jump120:;
    int64_t _210 = 516;
    _209.d1 = _210;
    if (_210 > 0) 
    goto _jump121;
    fail_assertion("non-positive loop bound");
    _jump121:;
    _209.d2 = _208;
    if (_208 > 0) 
    goto _jump122;
    fail_assertion("non-positive loop bound");
    _jump122:;
    int64_t _211 = 1;
    _211 *= _208;
    _211 *= _210;
    _211 *= _208;
    _211 *= sizeof(int64_t);
    _209.data = jpl_alloc(_211);
    int64_t _212 = 0; // d
    int64_t _213 = 0; // c
    int64_t _214 = 0; // b
    _jump123:; // Begin body of loop
    int64_t _215 = 13;
    int64_t _216 = 0;
    _216 *= _209.d0;
    _216 += _214;
    _216 *= _209.d1;
    _216 += _213;
    _216 *= _209.d2;
    _216 += _212;
    _209.data[_216] = _215;
    _212++;
    if (_212 < _208)
    goto _jump123;
    _212 = 0;
    _213++;
    if (_213 < _210)
    goto _jump123;
    _213 = 0;
    _214++;
    if (_214 < _208)
    goto _jump123;
    int64_t _217;
    int64_t _218 = 204;
    int64_t _219 = _208 + _218;
    if (_219 > 0) 
    goto _jump124;
    fail_assertion("non-positive loop bound");
    _jump124:;
    int64_t _220 = 772;
    if (_220 > 0) 
    goto _jump125;
    fail_assertion("non-positive loop bound");
    _jump125:;
    _217 = 0;
    int64_t _221 = 0; // c
    int64_t _222 = 0; // b
    _jump126:; // Begin body of loop
    int64_t _223 = 232;
    _217 += _223;
    _221++;
    if (_221 < _220)
    goto _jump126;
    _221 = 0;
    _222++;
    if (_222 < _219)
    goto _jump126;
    int64_t _224 = -_208;
    int64_t _225 = 554;
    int64_t _226 = _208 - _225;
    int64_t _227;
    int64_t _228 = 705;
    if (_228 > 0) 
    goto _jump127;
    fail_assertion("non-positive loop bound");
    _jump127:;
    if (_208 > 0) 
    goto _jump128;
    fail_assertion("non-positive loop bound");
    _jump128:;
    _227 = 0;
    int64_t _229 = 0; // c
    int64_t _230 = 0; // b
    _jump129:; // Begin body of loop
    int64_t _231 = 637;
    _227 += _231;
    _229++;
    if (_229 < _208)
    goto _jump129;
    _229 = 0;
    _230++;
    if (_230 < _228)
    goto _jump129;
    int64_t _232 = _226 / _227;
    if (_217 >= 0)
    goto _jump130;
    fail_assertion("negative array index");
    _jump130:;
    if (_217 < _209.d0)
    goto _jump131;
    fail_assertion("index too large");
    _jump131:;
    if (_224 >= 0)
    goto _jump132;
    fail_assertion("negative array index");
    _jump132:;
    if (_224 < _209.d1)
    goto _jump133;
    fail_assertion("index too large");
    _jump133:;
    if (_232 >= 0)
    goto _jump134;
    fail_assertion("negative array index");
    _jump134:;
    if (_232 < _209.d2)
    goto _jump135;
    fail_assertion("index too large");
    _jump135:;
    int64_t _233 = 0;
    _233 *= _209.d0;
    _233 += _217;
    _233 *= _209.d1;
    _233 += _224;
    _233 *= _209.d2;
    _233 += _232;
    int64_t _234 = _209.data[_233];
    int64_t _235 = -_234;
    _188 += _235;
    _208++;
    if (_208 < _189)
    goto _jump119;
    double _236 = 93.0;
    double _237 = 79.0;
    bool _238 = _236 < _237;
    bool _239;
    if (!_238)
    goto _jump136;
    bool _240 = false;
    bool _241 = !_240;
    _239 = _241;
    goto _jump137;
    _jump136:;
    bool _242 = true;
    bool _243 = !_242;
    double _244 = 17.0;
    double _245 = 29.0;
    bool _246 = _244 >= _245;
    bool _247 = _243 != _246;
    _239 = _247;
    _jump137:;
    int64_t _248;
    if (!_239)
    goto _jump138;
    int64_t _249;
    int64_t _250 = 365;
    if (_250 > 0) 
    goto _jump139;
    fail_assertion("non-positive loop bound");
    _jump139:;
    int64_t _251 = 7;
    int64_t _252 = -_251;
    int64_t _253 = 298;
    int64_t _254 = _252 * _253;
    if (_254 > 0) 
    goto _jump140;
    fail_assertion("non-positive loop bound");
    _jump140:;
    int64_t _255;
    int64_t _256 = 125;
    int64_t _257 = 589;
    int64_t _258 = _256 - _257;
    if (_258 > 0) 
    goto _jump141;
    fail_assertion("non-positive loop bound");
    _jump141:;
    _255 = 0;
    int64_t _259 = 0; // a
    _jump142:; // Begin body of loop
    _255 += _259;
    _259++;
    if (_259 < _258)
    goto _jump142;
    if (_255 > 0) 
    goto _jump143;
    fail_assertion("non-positive loop bound");
    _jump143:;
    _249 = 0;
    int64_t _260 = 0; // c
    int64_t _261 = 0; // b
    int64_t _262 = 0; // a
    _jump144:; // Begin body of loop
    int64_t _263 = 345;
    _249 += _263;
    _260++;
    if (_260 < _255)
    goto _jump144;
    _260 = 0;
    _261++;
    if (_261 < _254)
    goto _jump144;
    _261 = 0;
    _262++;
    if (_262 < _250)
    goto _jump144;
    _248 = _249;
    goto _jump145;
    _jump138:;
    int64_t _264 = 891;
    int64_t _265 = -_264;
    int64_t _266 = 324;
    int64_t _267 = -_266;
    int64_t _268 = _265 % _267;
    int64_t _269 = -_268;
    _248 = _269;
    _jump145:;
    int64_t _270 = -_248;
    bool _271 = true;
    bool _272 = !_271;
    bool _273 = !_272;
    int64_t _274;
    if (!_273)
    goto _jump146;
    int64_t _275 = 615;
    _274 = _275;
    goto _jump147;
    _jump146:;
    int64_t _276;
    int64_t _277 = 424;
    if (_277 > 0) 
    goto _jump148;
    fail_assertion("non-positive loop bound");
    _jump148:;
    _276 = 0;
    int64_t _278 = 0; // a
    _jump149:; // Begin body of loop
    int64_t _279 = 538;
    _276 += _279;
    _278++;
    if (_278 < _277)
    goto _jump149;
    _274 = _276;
    _jump147:;
    int64_t _280 = -_274;
    bool _281 = false;
    bool _282 = true;
    bool _283 = !_282;
    bool _284 = _281 != _283;
    _a1_int64_t _285;
    if (!_284)
    goto _jump150;
    _a1_int64_t _286;
    int64_t _287 = 305;
    _286.d0 = _287;
    if (_287 > 0) 
    goto _jump151;
    fail_assertion("non-positive loop bound");
    _jump151:;
    int64_t _288 = 1;
    _288 *= _287;
    _288 *= sizeof(int64_t);
    _286.data = jpl_alloc(_288);
    int64_t _289 = 0; // a
    _jump152:; // Begin body of loop
    bool _290 = true;
    int64_t _291;
    if (!_290)
    goto _jump153;
    int64_t _292 = 369;
    _291 = _292;
    goto _jump154;
    _jump153:;
    int64_t _293 = 466;
    _291 = _293;
    _jump154:;
    int64_t _294 = 0;
    _294 *= _286.d0;
    _294 += _289;
    _286.data[_294] = _291;
    _289++;
    if (_289 < _287)
    goto _jump152;
    _285 = _286;
    goto _jump155;
    _jump150:;
    int64_t _295 = 329;
    int64_t _296 = -_295;
    _a1_int64_t _297;
    _297.d0 = 1;
    _297.data = jpl_alloc(sizeof(int64_t) * 1);
    _297.data[0] = _296;
    _285 = _297;
    _jump155:;
    _a2_int64_t _298;
    int64_t _299 = 662;
    int64_t _300 = 481;
    int64_t _301 = _299 - _300;
    _298.d0 = _301;
    if (_301 > 0) 
    goto _jump156;
    fail_assertion("non-positive loop bound");
    _jump156:;
    int64_t _302 = 61;
    _298.d1 = _302;
    if (_302 > 0) 
    goto _jump157;
    fail_assertion("non-positive loop bound");
    _jump157:;
    int64_t _303 = 1;
    _303 *= _301;
    _303 *= _302;
    _303 *= sizeof(int64_t);
    _298.data = jpl_alloc(_303);
    int64_t _304 = 0; // b
    int64_t _305 = 0; // a
    _jump158:; // Begin body of loop
    int64_t _306 = 0;
    _306 *= _298.d0;
    _306 += _305;
    _306 *= _298.d1;
    _306 += _304;
    _298.data[_306] = _305;
    _304++;
    if (_304 < _302)
    goto _jump158;
    _304 = 0;
    _305++;
    if (_305 < _301)
    goto _jump158;
    int64_t _307 = 352;
    int64_t _308 = 805;
    if (_307 >= 0)
    goto _jump159;
    fail_assertion("negative array index");
    _jump159:;
    if (_307 < _298.d0)
    goto _jump160;
    fail_assertion("index too large");
    _jump160:;
    if (_308 >= 0)
    goto _jump161;
    fail_assertion("negative array index");
    _jump161:;
    if (_308 < _298.d1)
    goto _jump162;
    fail_assertion("index too large");
    _jump162:;
    int64_t _309 = 0;
    _309 *= _298.d0;
    _309 += _307;
    _309 *= _298.d1;
    _309 += _308;
    int64_t _310 = _298.data[_309];
    if (_310 >= 0)
    goto _jump163;
    fail_assertion("negative array index");
    _jump163:;
    if (_310 < _285.d0)
    goto _jump164;
    fail_assertion("index too large");
    _jump164:;
    int64_t _311 = 0;
    _311 *= _285.d0;
    _311 += _310;
    int64_t _312 = _285.data[_311];
    int64_t _313 = _280 - _312;
    if (_188 >= 0)
    goto _jump165;
    fail_assertion("negative array index");
    _jump165:;
    if (_188 < _0.d0)
    goto _jump166;
    fail_assertion("index too large");
    _jump166:;
    if (_270 >= 0)
    goto _jump167;
    fail_assertion("negative array index");
    _jump167:;
    if (_270 < _0.d1)
    goto _jump168;
    fail_assertion("index too large");
    _jump168:;
    if (_313 >= 0)
    goto _jump169;
    fail_assertion("negative array index");
    _jump169:;
    if (_313 < _0.d2)
    goto _jump170;
    fail_assertion("index too large");
    _jump170:;
    int64_t _314 = 0;
    _314 *= _0.d0;
    _314 += _188;
    _314 *= _0.d1;
    _314 += _270;
    _314 *= _0.d2;
    _314 += _313;
    rgba _315 = _0.data[_314];
    double _316 = _315.a;
}

Compilation succeeded: compilation complete
