global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 33.11
const1: dq 716
const2: db `non-positive loop bound`, 0
const3: db `overflow computing array size`, 0
const4: dq 1
const5: dq 145
const6: db `negative array index`, 0
const7: db `index too large`, 0
const8: dq 365
const9: dq 0
const10: dq 389
const11: dq 147
const12: dq 425
const13: dq 704
const14: dq 912
const15: dq 284
const16: dq 916
const17: dq 423
const18: dq 837
const19: dq 18
const20: db `divide by zero`, 0
const21: dq 79
const22: dq 223
const23: dq 677
const24: dq 975
const25: dq 23
const26: dq 603
const27: dq 169
const28: dq 842
const29: dq 287
const30: dq 338
const31: dq 191
const32: dq 943
const33: dq 406
const34: dq 749
const35: dq 659
const36: dq 584
const37: dq 33

section .text
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
mov rax, [rel const0]
push rax
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov rax, [rel const1]
push rax
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump1
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump1:
mov rdi, 8
imul rdi, [rsp + 0]
jno .jump2
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump2:
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov [rsp + 8], rax
mov rax, 0
push rax
.jump3:
mov rax, [rel const4]
push rax
pop rax
xor rax, 1
push rax
mov rax, 0
imul rax, [rsp + 16]
add rax, [rsp + 8]
imul rax, 8
add rax, [rsp + 24]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 8]
jl .jump3
add rsp, 8
mov rax, [rel const5]
push rax
mov rax, [rsp + 0]
cmp rax, 0
jge .jump4
lea rdi, [rel const6]
call _fail_assertion
.jump4:
cmp rax, [rsp + 8]
jl .jump5
lea rdi, [rel const7]
call _fail_assertion
.jump5:
mov rax, 0
imul rax, [rsp + 8]
add rax, [rsp + 0]
imul rax, 8
add rax, [rsp + 16]
add rsp, 8
add rsp, 16
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
pop rax
cmp rax, 0
je .jump6
sub rsp, 8
mov rax, [rel const8]
push rax
pop rax
neg rax
push rax
pop rax
neg rax
push rax
mov rax, [rel const9]
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
je .jump8
mov rax, [rel const10]
push rax
jmp .jump9
.jump8:
mov rax, [rel const11]
push rax
.jump9:
pop rax
pop r10
imul rax, r10
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump10
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump10:
mov rax, [rel const12]
push rax
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump11
lea rdi, [rel const2]
call _fail_assertion
.jump11:
sub rsp, 8
mov rax, [rel const13]
push rax
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump12
lea rdi, [rel const2]
call _fail_assertion
.jump12:
mov rax, 0
mov [rsp + 8], rax
mov rax, 0
push rax
.jump13:
mov rax, [rel const14]
push rax
pop rax
add [rsp + 16], rax
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 8]
jl .jump13
add rsp, 8
add rsp, 8
mov rax, [rsp]
cmp rax, 0
jg .jump14
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump14:
mov rdi, 16
imul rdi, [rsp + 0]
jno .jump15
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump15:
imul rdi, [rsp + 8]
jno .jump16
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump16:
imul rdi, [rsp + 16]
jno .jump17
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump17:
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump18:
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov rax, 0
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, [rsp + 48]
add rax, [rsp + 24]
imul rax, [rsp + 56]
add rax, [rsp + 32]
imul rax, 16
add rax, [rsp + 64]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 16
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump18
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump18
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump18
add rsp, 24
jmp .jump7
.jump6:
mov rax, [rel const9]
push rax
pop rax
cmp rax, 0
je .jump19
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpeqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
jmp .jump20
.jump19:
mov rax, [rel const4]
push rax
.jump20:
pop rax
cmp rax, 0
je .jump21
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpneqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
jmp .jump22
.jump21:
mov rax, [rel const9]
push rax
.jump22:
pop rax
cmp rax, 0
je .jump23
sub rsp, 8
sub rsp, 8
mov rax, [rel const15]
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump25
lea rdi, [rel const2]
call _fail_assertion
.jump25:
mov rax, [rel const16]
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump26
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump26:
mov rax, 0
mov [rsp + 16], rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump27:
sub rsp, 8
mov r10, [rbp - 48 + 0]
mov [rsp + 0], r10
pop rax
add [rsp + 32], rax
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 24]
jl .jump27
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 16]
jl .jump27
add rsp, 16
add rsp, 16
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump28
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump28:
mov rax, [rel const17]
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump29
lea rdi, [rel const2]
call _fail_assertion
.jump29:
mov rax, [rel const18]
push rax
mov rax, [rel const19]
push rax
pop rax
pop r10
cmp r10, 0
jne .jump30
lea rdi, [rel const20]
call _fail_assertion
.jump30:
cqo
idiv r10
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump31
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump31:
mov rdi, 16
imul rdi, [rsp + 0]
jno .jump32
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump32:
imul rdi, [rsp + 8]
jno .jump33
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump33:
imul rdi, [rsp + 16]
jno .jump34
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump34:
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump35:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 48 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
mov rdi, 24
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 16]
mov [rax + 16], r10
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 24
push rax
mov rax, 3
push rax
mov rax, 0
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, [rsp + 48]
add rax, [rsp + 24]
imul rax, [rsp + 56]
add rax, [rsp + 32]
imul rax, 16
add rax, [rsp + 64]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 16
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump35
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump35
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump35
add rsp, 24
jmp .jump24
.jump23:
sub rsp, 8
mov rax, [rel const21]
push rax
sub rsp, 8
mov rax, [rel const22]
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump36
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump36:
mov rax, 0
mov [rsp + 8], rax
mov rax, 0
push rax
.jump37:
mov rax, [rel const23]
push rax
pop rax
add [rsp + 16], rax
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 8]
jl .jump37
add rsp, 8
add rsp, 8
pop rax
pop r10
imul rax, r10
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump38
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump38:
mov rax, [rel const24]
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump39
lea rdi, [rel const2]
call _fail_assertion
.jump39:
mov rax, [rel const25]
push rax
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump40
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump40:
mov rdi, 16
imul rdi, [rsp + 0]
jno .jump41
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump41:
imul rdi, [rsp + 8]
jno .jump42
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump42:
imul rdi, [rsp + 16]
jno .jump43
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump43:
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump44:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
pop rax
pop r10
cmp r10, 0
jne .jump45
lea rdi, [rel const20]
call _fail_assertion
.jump45:
cqo
idiv r10
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov rax, 0
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, [rsp + 48]
add rax, [rsp + 24]
imul rax, [rsp + 56]
add rax, [rsp + 32]
imul rax, 16
add rax, [rsp + 64]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 16
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump44
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump44
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump44
add rsp, 24
.jump24:
.jump7:
mov rax, [rel const26]
push rax
pop rax
neg rax
push rax
pop rax
neg rax
push rax
mov rax, [rel const27]
push rax
pop rax
neg rax
push rax
mov rax, [rel const28]
push rax
mov rax, [rsp + 0]
cmp rax, 0
jge .jump46
lea rdi, [rel const6]
call _fail_assertion
.jump46:
cmp rax, [rsp + 24]
jl .jump47
lea rdi, [rel const7]
call _fail_assertion
.jump47:
mov rax, [rsp + 8]
cmp rax, 0
jge .jump48
lea rdi, [rel const6]
call _fail_assertion
.jump48:
cmp rax, [rsp + 32]
jl .jump49
lea rdi, [rel const7]
call _fail_assertion
.jump49:
mov rax, [rsp + 16]
cmp rax, 0
jge .jump50
lea rdi, [rel const6]
call _fail_assertion
.jump50:
cmp rax, [rsp + 40]
jl .jump51
lea rdi, [rel const7]
call _fail_assertion
.jump51:
mov rax, 0
imul rax, [rsp + 24]
add rax, [rsp + 0]
imul rax, [rsp + 32]
add rax, [rsp + 8]
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, 16
add rax, [rsp + 48]
add rsp, 8
add rsp, 8
add rsp, 8
add rsp, 32
sub rsp, 16
mov r10, [rax + 8]
mov [rsp + 8], r10
mov r10, [rax + 0]
mov [rsp + 0], r10
sub rsp, 8
mov rax, [rel const29]
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump52
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump52:
sub rsp, 8
mov rax, [rel const30]
push rax
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump53
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump53:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
pop rax
neg rax
push rax
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov rax, [rel const31]
push rax
mov rax, [rsp + 0]
cmp rax, 0
jge .jump54
lea rdi, [rel const6]
call _fail_assertion
.jump54:
cmp rax, [rsp + 8]
jl .jump55
lea rdi, [rel const7]
call _fail_assertion
.jump55:
mov rax, 0
imul rax, [rsp + 8]
add rax, [rsp + 0]
imul rax, 8
add rax, [rsp + 16]
add rsp, 8
add rsp, 16
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump56
lea rdi, [rel const2]
call _fail_assertion
.jump56:
mov rax, 0
mov [rsp + 16], rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump57:
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
add [rsp + 32], rax
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 24]
jl .jump57
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 16]
jl .jump57
add rsp, 16
add rsp, 16
mov rax, [rsp]
cmp rax, 0
jg .jump58
lea rdi, [rel const2]
call _fail_assertion
.jump58:
mov rax, [rel const9]
push rax
pop rax
xor rax, 1
push rax
mov rax, [rel const9]
push rax
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
pop rax
cmp rax, 0
je .jump59
mov rax, [rel const32]
push rax
jmp .jump60
.jump59:
mov rax, [rel const33]
push rax
pop rax
neg rax
push rax
pop rax
neg rax
push rax
.jump60:
pop rax
neg rax
push rax
mov rax, [rsp]
cmp rax, 0
jg .jump61
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump61:
mov rdi, 32
imul rdi, [rsp + 0]
jno .jump62
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump62:
imul rdi, [rsp + 8]
jno .jump63
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump63:
imul rdi, [rsp + 16]
jno .jump64
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump64:
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump65:
mov rax, [rel const4]
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
je .jump66
mov rax, [rel const9]
push rax
jmp .jump67
.jump66:
mov rax, [rel const34]
push rax
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
pop rax
pop r10
add rax, r10
push rax
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
.jump67:
pop rax
cmp rax, 0
je .jump68
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump70
lea rdi, [rel const2]
call _fail_assertion
.jump70:
sub rsp, 16
mov r10, [rbp - 48 + 8]
mov [rsp + 8], r10
mov r10, [rbp - 48 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 88 + 0]
mov [rsp + 0], r10
mov rax, [rsp + 0]
cmp rax, 0
jge .jump71
sub rsp, 8
lea rdi, [rel const6]
call _fail_assertion
add rsp, 8
.jump71:
cmp rax, [rsp + 8]
jl .jump72
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump72:
mov rax, 0
imul rax, [rsp + 8]
add rax, [rsp + 0]
imul rax, 8
add rax, [rsp + 16]
add rsp, 8
add rsp, 16
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump73
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump73:
sub rsp, 16
mov r10, [rbp - 48 + 8]
mov [rsp + 8], r10
mov r10, [rbp - 48 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 88 + 0]
mov [rsp + 0], r10
mov rax, [rsp + 0]
cmp rax, 0
jge .jump74
lea rdi, [rel const6]
call _fail_assertion
.jump74:
cmp rax, [rsp + 8]
jl .jump75
lea rdi, [rel const7]
call _fail_assertion
.jump75:
mov rax, 0
imul rax, [rsp + 8]
add rax, [rsp + 0]
imul rax, 8
add rax, [rsp + 16]
add rsp, 8
add rsp, 16
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump76
lea rdi, [rel const2]
call _fail_assertion
.jump76:
mov rdi, 32
imul rdi, [rsp + 0]
jno .jump77
lea rdi, [rel const3]
call _fail_assertion
.jump77:
imul rdi, [rsp + 8]
jno .jump78
lea rdi, [rel const3]
call _fail_assertion
.jump78:
imul rdi, [rsp + 16]
jno .jump79
lea rdi, [rel const3]
call _fail_assertion
.jump79:
call _jpl_alloc
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump80:
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 136 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump81
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump81:
sub rsp, 8
mov r10, [rbp - 144 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump82
lea rdi, [rel const2]
call _fail_assertion
.jump82:
sub rsp, 8
mov r10, [rbp - 88 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump83
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump83:
mov rdi, 8
imul rdi, [rsp + 0]
jno .jump84
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump84:
imul rdi, [rsp + 8]
jno .jump85
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump85:
imul rdi, [rsp + 16]
jno .jump86
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump86:
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump87:
sub rsp, 8
mov r10, [rbp - 24 + 0]
mov [rsp + 0], r10
mov rax, 0
imul rax, [rsp + 32]
add rax, [rsp + 8]
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, [rsp + 48]
add rax, [rsp + 24]
imul rax, 8
add rax, [rsp + 56]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump87
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump87
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump87
add rsp, 24
mov rax, 0
imul rax, [rsp + 56]
add rax, [rsp + 32]
imul rax, [rsp + 64]
add rax, [rsp + 40]
imul rax, [rsp + 72]
add rax, [rsp + 48]
imul rax, 32
add rax, [rsp + 80]
mov r10, [rsp + 24]
mov [rax + 24], r10
mov r10, [rsp + 16]
mov [rax + 16], r10
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 32
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump80
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump80
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump80
add rsp, 24
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump88
lea rdi, [rel const2]
call _fail_assertion
.jump88:
mov rax, 0
mov [rsp + 8], rax
mov rax, 0
push rax
.jump89:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
pop rax
add [rsp + 16], rax
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 8]
jl .jump89
add rsp, 8
add rsp, 8
sub rsp, 8
mov r10, [rbp - 88 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
pop rax
cmp rax, 0
je .jump90
mov rax, [rel const35]
push rax
jmp .jump91
.jump90:
sub rsp, 8
mov r10, [rbp - 88 + 0]
mov [rsp + 0], r10
.jump91:
mov rax, [rel const9]
push rax
pop rax
cmp rax, 0
je .jump92
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump94
lea rdi, [rel const2]
call _fail_assertion
.jump94:
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump95
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump95:
mov rax, 0
mov [rsp + 16], rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump96:
sub rsp, 8
mov r10, [rbp - 64 + 0]
mov [rsp + 0], r10
pop rax
add [rsp + 32], rax
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 24]
jl .jump96
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 16]
jl .jump96
add rsp, 16
add rsp, 16
jmp .jump93
.jump92:
sub rsp, 8
mov r10, [rbp - 88 + 0]
mov [rsp + 0], r10
.jump93:
mov rax, [rsp + 0]
cmp rax, 0
jge .jump97
sub rsp, 8
lea rdi, [rel const6]
call _fail_assertion
add rsp, 8
.jump97:
cmp rax, [rsp + 24]
jl .jump98
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump98:
mov rax, [rsp + 8]
cmp rax, 0
jge .jump99
sub rsp, 8
lea rdi, [rel const6]
call _fail_assertion
add rsp, 8
.jump99:
cmp rax, [rsp + 32]
jl .jump100
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump100:
mov rax, [rsp + 16]
cmp rax, 0
jge .jump101
sub rsp, 8
lea rdi, [rel const6]
call _fail_assertion
add rsp, 8
.jump101:
cmp rax, [rsp + 40]
jl .jump102
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump102:
mov rax, 0
imul rax, [rsp + 24]
add rax, [rsp + 0]
imul rax, [rsp + 32]
add rax, [rsp + 8]
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, 32
add rax, [rsp + 48]
add rsp, 8
add rsp, 8
add rsp, 8
add rsp, 32
sub rsp, 32
mov r10, [rax + 24]
mov [rsp + 24], r10
mov r10, [rax + 16]
mov [rsp + 16], r10
mov r10, [rax + 8]
mov [rsp + 8], r10
mov r10, [rax + 0]
mov [rsp + 0], r10
jmp .jump69
.jump68:
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump103
lea rdi, [rel const2]
call _fail_assertion
.jump103:
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump104
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump104:
mov rax, [rel const4]
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
je .jump105
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
jmp .jump106
.jump105:
mov rax, [rel const36]
push rax
pop rax
neg rax
push rax
.jump106:
mov rax, [rsp]
cmp rax, 0
jg .jump107
lea rdi, [rel const2]
call _fail_assertion
.jump107:
mov rdi, 8
imul rdi, [rsp + 0]
jno .jump108
lea rdi, [rel const3]
call _fail_assertion
.jump108:
imul rdi, [rsp + 8]
jno .jump109
lea rdi, [rel const3]
call _fail_assertion
.jump109:
imul rdi, [rsp + 16]
jno .jump110
lea rdi, [rel const3]
call _fail_assertion
.jump110:
call _jpl_alloc
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump111:
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, 0
imul rax, [rsp + 32]
add rax, [rsp + 8]
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, [rsp + 48]
add rax, [rsp + 24]
imul rax, 8
add rax, [rsp + 56]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump111
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump111
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump111
add rsp, 24
.jump69:
mov rax, 0
imul rax, [rsp + 56]
add rax, [rsp + 32]
imul rax, [rsp + 64]
add rax, [rsp + 40]
imul rax, [rsp + 72]
add rax, [rsp + 48]
imul rax, 32
add rax, [rsp + 80]
mov r10, [rsp + 24]
mov [rax + 24], r10
mov r10, [rsp + 16]
mov [rax + 16], r10
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 32
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump65
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump65
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump65
add rsp, 24
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
mov rax, [rel const9]
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
je .jump112
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
jmp .jump113
.jump112:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
.jump113:
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump114
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump114:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump115
lea rdi, [rel const2]
call _fail_assertion
.jump115:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump116
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump116:
mov rax, 0
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump117:
mov rax, [rel const9]
push rax
pop rax
cmp rax, 0
je .jump118
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
jmp .jump119
.jump118:
sub rsp, 8
mov r10, [rbp - 80 + 0]
mov [rsp + 0], r10
.jump119:
pop rax
add [rsp + 48], rax
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump117
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump117
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump117
add rsp, 24
add rsp, 24
mov rdi, 16
call _jpl_alloc
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 16
push rax
mov rax, 2
push rax
mov rax, [rel const4]
push rax
pop rax
cmp rax, 0
je .jump120
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
neg rax
push rax
jmp .jump121
.jump120:
sub rsp, 8
mov r10, [rbp - 72 + 0]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
neg rax
push rax
.jump121:
mov rax, [rsp + 0]
cmp rax, 0
jge .jump122
sub rsp, 8
lea rdi, [rel const6]
call _fail_assertion
add rsp, 8
.jump122:
cmp rax, [rsp + 8]
jl .jump123
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump123:
mov rax, 0
imul rax, [rsp + 8]
add rax, [rsp + 0]
imul rax, 8
add rax, [rsp + 16]
add rsp, 8
add rsp, 16
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
mov rax, [rel const37]
push rax
mov rax, [rsp + 0]
cmp rax, 0
jge .jump124
lea rdi, [rel const6]
call _fail_assertion
.jump124:
cmp rax, [rsp + 24]
jl .jump125
lea rdi, [rel const7]
call _fail_assertion
.jump125:
mov rax, [rsp + 8]
cmp rax, 0
jge .jump126
lea rdi, [rel const6]
call _fail_assertion
.jump126:
cmp rax, [rsp + 32]
jl .jump127
lea rdi, [rel const7]
call _fail_assertion
.jump127:
mov rax, [rsp + 16]
cmp rax, 0
jge .jump128
lea rdi, [rel const6]
call _fail_assertion
.jump128:
cmp rax, [rsp + 40]
jl .jump129
lea rdi, [rel const7]
call _fail_assertion
.jump129:
mov rax, 0
imul rax, [rsp + 24]
add rax, [rsp + 0]
imul rax, [rsp + 32]
add rax, [rsp + 8]
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, 32
add rax, [rsp + 48]
add rsp, 8
add rsp, 8
add rsp, 8
add rsp, 32
sub rsp, 32
mov r10, [rax + 24]
mov [rsp + 24], r10
mov r10, [rax + 16]
mov [rsp + 16], r10
mov r10, [rax + 8]
mov [rsp + 8], r10
mov r10, [rax + 0]
mov [rsp + 0], r10
add rsp, 64
pop r12
pop rbp
ret


Compilation succeeded: Conversion to ASM IR complete
