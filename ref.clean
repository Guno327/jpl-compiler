global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: db `non-positive loop bound`, 0
const1: db `overflow computing array size`, 0
const2: db `negative array index`, 0
const3: db `index too large`, 0
section .text
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
push qword 300
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump1
lea rdi, [rel const0]
call _fail_assertion
.jump1:
mov rdi, 8
imul rdi, [rsp + 0 + 0]
jno .jump2
lea rdi, [rel const1]
call _fail_assertion
.jump2:
call _jpl_alloc
mov [rsp + 8], rax
mov rax, 0
push rax
.jump3:
push qword 1
mov rax, [rsp + 8]
shl rax, 3
add rax, [rsp + 24]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 8]
jl .jump3
add rsp, 8
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump4
lea rdi, [rel const0]
call _fail_assertion
.jump4:
mov rdi, 8
imul rdi, [rsp + 0 + 0]
jno .jump5
lea rdi, [rel const1]
call _fail_assertion
.jump5:
call _jpl_alloc
mov [rsp + 8], rax
mov rax, 0
push rax
.jump6:
push qword 2
mov rax, [rsp + 8]
shl rax, 3
add rax, [rsp + 24]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 8]
jl .jump6
add rsp, 8
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump7
lea rdi, [rel const0]
call _fail_assertion
.jump7:
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump8
sub rsp, 8
lea rdi, [rel const0]
call _fail_assertion
add rsp, 8
.jump8:
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump9
lea rdi, [rel const0]
call _fail_assertion
.jump9:
mov rdi, 8
imul rdi, [rsp + 0 + 0]
jno .jump10
lea rdi, [rel const1]
call _fail_assertion
.jump10:
imul rdi, [rsp + 0 + 8]
jno .jump11
lea rdi, [rel const1]
call _fail_assertion
.jump11:
imul rdi, [rsp + 0 + 16]
jno .jump12
lea rdi, [rel const1]
call _fail_assertion
.jump12:
call _jpl_alloc
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump13:
push qword 1
mov rax, [rsp + 8]
imul rax, [rsp + 40]
add rax, [rsp + 16]
imul rax, [rsp + 48]
add rax, [rsp + 24]
shl rax, 3
add rax, [rsp + 56]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump13
mov qword [rsp + 16], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump13
mov qword [rsp + 8], 0
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump13
add rsp, 24
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump14
lea rdi, [rel const0]
call _fail_assertion
.jump14:
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump15
sub rsp, 8
lea rdi, [rel const0]
call _fail_assertion
add rsp, 8
.jump15:
sub rsp, 8
mov r10, [rbp - 16 + 0]
mov [rsp + 0], r10
mov rax, [rsp]
cmp rax, 0
jg .jump16
lea rdi, [rel const0]
call _fail_assertion
.jump16:
mov rdi, 8
imul rdi, [rsp + 16 + 0]
jno .jump17
lea rdi, [rel const1]
call _fail_assertion
.jump17:
call _jpl_alloc
mov [rsp + 24], rax
mov rax, 0
push rax
mov rax, 0
push rax
mov rax, 0
push rax
.jump18:
sub rsp, 8
mov r10, [rbp - 136 + 0]
mov [rsp + 0], r10
mov rax, [rsp + 0]
cmp rax, 0
jge .jump19
lea rdi, [rel const2]
call _fail_assertion
.jump19:
cmp rax, [rsp + 96]
jl .jump20
lea rdi, [rel const3]
call _fail_assertion
.jump20:
mov rax, [rsp + 0]
shl rax, 3
add rax, [rsp + 104]
add rsp, 8
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 128 + 0]
mov [rsp + 0], r10
mov rax, [rsp + 0]
cmp rax, 0
jge .jump21
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump21:
cmp rax, [rsp + 120]
jl .jump22
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump22:
mov rax, [rsp + 0]
shl rax, 3
add rax, [rsp + 128]
add rsp, 8
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 136 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 128 + 0]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 120 + 0]
mov [rsp + 0], r10
mov rax, [rsp + 0]
cmp rax, 0
jge .jump23
lea rdi, [rel const2]
call _fail_assertion
.jump23:
cmp rax, [rsp + 96]
jl .jump24
lea rdi, [rel const3]
call _fail_assertion
.jump24:
mov rax, [rsp + 8]
cmp rax, 0
jge .jump25
lea rdi, [rel const2]
call _fail_assertion
.jump25:
cmp rax, [rsp + 104]
jl .jump26
lea rdi, [rel const3]
call _fail_assertion
.jump26:
mov rax, [rsp + 16]
cmp rax, 0
jge .jump27
lea rdi, [rel const2]
call _fail_assertion
.jump27:
cmp rax, [rsp + 112]
jl .jump28
lea rdi, [rel const3]
call _fail_assertion
.jump28:
mov rax, [rsp + 0]
imul rax, [rsp + 104]
add rax, [rsp + 8]
imul rax, [rsp + 112]
add rax, [rsp + 16]
shl rax, 3
add rax, [rsp + 120]
add rsp, 24
sub rsp, 8
mov r10, [rax + 0]
mov [rsp + 0], r10
pop rax
pop r10
imul rax, r10
push rax
pop rax
pop r10
imul rax, r10
push rax
mov rax, [rsp + 24]
shl rax, 3
add rax, [rsp + 56]
pop r10
add [rax], r10
add qword [rsp + 0], 1
mov rax, [rsp + 0]
cmp rax, [rsp + 24]
jl .jump18
mov qword [rsp + 0], 0
add qword [rsp + 8], 1
mov rax, [rsp + 8]
cmp rax, [rsp + 32]
jl .jump18
mov qword [rsp + 8], 0
add qword [rsp + 16], 1
mov rax, [rsp + 16]
cmp rax, [rsp + 40]
jl .jump18
add rsp, 24
add rsp, 16
add rsp, 88
pop r12
pop rbp
ret
Compilation succeeded: assembly complete
